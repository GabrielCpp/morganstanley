from pydantic import BaseModel


from typing import List, Optional, Dict, Any
from pydantic import BaseModel


class Reference(BaseModel):
    type: str
    url: str


class DatabaseSpecific(BaseModel):
    github_reviewed_at: Optional[str] = None
    github_reviewed: Optional[bool] = None
    severity: Optional[str] = None
    cwe_ids: Optional[List[str]] = None
    nvd_published_at: Optional[str] = None
    source: Optional[str] = None


class Severity(BaseModel):
    type: str
    score: str


class Package(BaseModel):
    name: str
    ecosystem: str
    purl: Optional[str] = None


class RangeEvent(BaseModel):
    introduced: Optional[str] = None
    fixed: Optional[str] = None


class Range(BaseModel):
    type: str
    events: List[RangeEvent]


class Affected(BaseModel):
    package: Package
    ranges: List[Range]
    versions: List[str]
    database_specific: Optional[DatabaseSpecific] = None


class Vulnerability(BaseModel):
    id: str
    summary: str
    details: str
    aliases: List[str]
    modified: str
    published: str
    database_specific: DatabaseSpecific
    references: List[Reference]
    affected: List[Affected]
    schema_version: str
    severity: List[Severity]
